#!/usr/bin/env node

var jesus = require(".."),
    ArgumentParser = require("argparse").ArgumentParser,
    asciitable = require("asciitable"),
    fs = require("fs"),
    leg = require("leg"),
    packageInfo = require("../package.json"),
    parstack = require("parstack"),
    randomId = require("proquint-random-id"),
    vagueTime = require("vague-time");

var dump_error = function dump_error(err) {
  console.warn("");
  console.warn("Server reported error: %j", err);
  console.warn("");

  process.exit(1);
};

var dump_local_error = function dump_local_error(err) {
  if (err.message === "connect ECONNREFUSED") {
    console.warn("");
    console.warn("It looks like there's no jesus daemon running!");
    console.warn("");
    console.warn("You probably want to run `jesus daemon -l /path/to/log/file'");
    console.warn("");
    console.warn("In case this diagnosis is wrong, here's an error trace:");
  } else {
    console.warn("");
    console.warn("An error occurred and it's not clear what caused it!");
    console.warn("");
    console.warn("Please post an issue about the error trace below:");
    console.warn("");
    console.warn("  https://github.com/deoxxa/jesus/issues/new");
    console.warn("");
    console.warn("Or just click this link and send me an email:");
    console.warn("");
    console.warn("  mailto:deoxxa@fknsrs.biz?subject=Jesus%20Is%20Broken%21&body=" + escape([
      err.stack,
      ["jesus", packageInfo.version].join("@"),
      JSON.stringify(process.versions, null, 2),
    ].join("\n\n")));
  }

  console.warn("");
  console.warn(err.stack);
  console.warn("");

  process.exit(1);
};

var dump_processes = function dump_processes(list) {
  var options = {
    columns: [
      {name: "ID", field: "id"},
      {name: "PID", field: "pid"},
      {name: "Restarts", field: "restarts"},
      {name: "Uptime", field: "uptime"},
      {name: "Command", field: "command"},
    ],
    skinny: true,
    intersectionCharacter: "`",
  };

  console.log(asciitable(options, list.sort(function(a, b) { return a.id === b.id ? 0 : a.id > b.id ? 1 : -1; }).map(function(e) {
    return {
      id: e.id,
      pid: e.pid.toString(10),
      restarts: e.started.length.toString(10),
      uptime: vagueTime.get({from: new Date(), to: new Date(e.started[e.started.length-1])}).replace(/ ago$/, ""),
      command: e.args.join(" "),
    };
  })));

  process.exit(0);
};

var action_listen = function action_listen(args) {
  var logStream = process.stdout,
      log = null;

  var server = null,
      persistent = {};

  var options = {
    basepath: args.base_path,
  };

  if (args.port) {
    server = jesus.createServer(options).listen(args.port, args.host);
  } else if (args.socket) {
    server = jesus.createServer(options).listen(args.socket);
  } else {
    server = jesus.createServer(options).listen();
  }

  if (args.log) {
    logStream = require("fs").createWriteStream(args.log, {flags: "a"});
  } else {
    logStream = process.stdout;
  }

  if (args.state) {
    try {
      persistent = require(args.state);
    } catch (e) {}
  }

  log = leg(logStream);

  log.info("started", {});

  process.on("uncaughtException", function(err) {
    server.jesus.stopAll();

    log.error("exception", {err: parstack(err)});

    setImmediate(function() {
      process.exit(1);
    });
  });

  server.on("clientConnected", function() {
    log.info("client connected", {});
  });

  server.on("clientDisconnected", function() {
    log.info("client disconnected", {});
  });

  server.on("command", function(command) {
    log.info("command", {jesus: {command: command}});
  });

  server.on("command", function(command) {
    if (command[0] !== "start" && command[0] !== "stop" && command[0] !== "stopAll") {
      return;
    }

    if (command[0] === "start") {
      persistent[command[2].id] = {
        command: command[1],
        options: command[2],
      };
    }

    if (command[0] === "stop") {
      delete persistent[command[1]];
    }

    if (command[0] === "stopAll") {
      for (var k in persistent) {
        delete persistent[k];
      }
    }

    if (args.state) {
      fs.writeFileSync(args.state, JSON.stringify(persistent, null, 2));
    }
  });

  ["processStarted", "processExited", "processError", "processTerminated"].forEach(function(event) {
    server.jesus.on(event, function(info) {
      log.info(event.replace(/([a-z])([A-Z])/, "$1 $2").toLowerCase(), {jesus: {process: info}});
    });
  });

  for (var k in persistent) {
    server.jesus.start(persistent[k].command, persistent[k].options);
  }
};

var action_daemon = function action_daemon(args) {
  require("child_process").spawn("node", [process.argv[1], "listen"].concat(process.argv.slice(3)), {
    detached: true,
    cwd: process.cwd(),
    stdio: "ignore",
  }).unref();
};

var action_start = function action_start(args) {
  var env = (args.env || []).reduce(function(i, v) {
    var bits = v.match(/^(.+?)(?:=(.+))?/);

    i[bits[1]] = bits[2] || '';

    return i;
  }, {});

  jesus.connect(args.port || args.socket, args.host).on("error", dump_local_error).callRemote("start", args.command, {
    id: args.name,
    cwd: process.cwd(),
    env: env,
  }, function(err, info) {
    if (err) {
      dump_error(err);
    }

    if (args.format === "json") {
      console.log(JSON.stringify(info));
      process.exit(0);
    }

    dump_processes([info]);
  });
};

var action_stop = function action_stop(args) {
  jesus.connect(args.port || args.socket, args.host).on("error", dump_local_error).callRemote("stop", args.name, function(err, info) {
    if (err) {
      dump_error(err);
    }

    if (args.format === "json") {
      console.log(JSON.stringify(info));
      process.exit(0);
    }

    dump_processes([info]);
  });
};

var action_stopAll = function action_stopAll(args) {
  jesus.connect(args.port || args.socket, args.host).on("error", dump_local_error).callRemote("stopAll", function(err, list) {
    if (err) {
      dump_error(err);
    }

    if (args.format === "json") {
      console.log(JSON.stringify(list));
      process.exit(0);
    }

    dump_processes(list);
  });
};

var action_restart = function action_restart(args) {
  jesus.connect(args.port || args.socket, args.host).on("error", dump_local_error).callRemote("restart", args.name, function(err, info) {
    if (err) {
      dump_error(err);
    }

    if (args.format === "json") {
      console.log(JSON.stringify(info));
      process.exit(0);
    }

    dump_processes([info]);
  });
};

var action_restartAll = function action_restartAll(args) {
  jesus.connect(args.port || args.socket, args.host).on("error", dump_local_error).callRemote("restartAll", function(err, list) {
    if (err) {
      dump_error(err);
    }

    if (args.format === "json") {
      console.log(JSON.stringify(list));
      process.exit(0);
    }

    dump_processes(list);
  });
};

var action_check = function action_check(args) {
  jesus.connect(args.port || args.socket, args.host).on("error", dump_local_error).callRemote("check", args.name, function(err, info) {
    if (err) {
      dump_error(err);
    }

    if (args.format === "json") {
      console.log(JSON.stringify(info));
      process.exit(0);
    }

    dump_processes([info]);
  });
};

var action_list = function action_list(args) {
  jesus.connect(args.port || args.socket, args.host).on("error", dump_local_error).callRemote("list", function(err, list) {
    if (err) {
      dump_error(err);
    }

    if (args.format === "json") {
      console.log(JSON.stringify(list));
      process.exit(0);
    }

    dump_processes(list);
  });
};

var ap = new ArgumentParser({
  version: packageInfo.version,
  addHelp: true,
  description: packageInfo.description,
});

var sp = ap.addSubparsers({
  title: "Actions",
  dest: "action",
});

var sc_listen = sp.addParser("listen", {
  description: "Start jesus listening",
});
sc_listen.addArgument(["-H", "--host"], {
  defaultValue: process.env.JESUS_HOST,
  help: "Host for jesus to listen on",
});
sc_listen.addArgument(["-p", "--port"], {
  defaultValue: process.env.JESUS_PORT,
  help: "Port for jesus to listen on",
});
sc_listen.addArgument(["-s", "--socket"], {
  defaultValue: process.env.JESUS_SOCKET,
  help: "Unix socket for jesus to listen on (only used if host/port are not)",
});
sc_listen.addArgument(["-b", "--base-path"], {
  defaultValue: process.env.JESUS_BASE,
  help: "Base directory for application logs and other files to go in",
});
sc_listen.addArgument(["-l", "--log"], {
  defaultValue: process.env.JESUS_LOG,
  help: "Log file for actions taken and events emitted by jesus"
});
sc_listen.addArgument(["-S", "--state"], {
  defaultValue: process.env.JESUS_STATE,
  help: "State file for keeping track of running processes between starts/stops",
});

var sc_daemon = sp.addParser("daemon", {
  description: "Start jesus listening and daemonise",
});
sc_daemon.addArgument(["-H", "--host"], {
  defaultValue: process.env.JESUS_HOST,
  help: "Host for jesus to listen on",
});
sc_daemon.addArgument(["-p", "--port"], {
  defaultValue: process.env.JESUS_PORT,
  help: "Port for jesus to listen on",
});
sc_daemon.addArgument(["-s", "--socket"], {
  defaultValue: process.env.JESUS_SOCKET,
  help: "Unix socket for jesus to listen on (only used if host/port are not)",
});
sc_daemon.addArgument(["-b", "--base-path"], {
  defaultValue: process.env.JESUS_BASE,
  help: "Base directory for application logs and other files to go in",
});
sc_daemon.addArgument(["-l", "--log"], {
  defaultValue: process.env.JESUS_LOG,
  help: "Log file for actions taken and events emitted by jesus"
});
sc_daemon.addArgument(["-S", "--state"], {
  defaultValue: process.env.JESUS_STATE,
  help: "State file for keeping track of running processes between starts/stops",
});

var sc_start = sp.addParser("start", {
  description: "Start a process",
});
sc_start.addArgument(["-H", "--host"], {
  defaultValue: process.env.JESUS_HOST,
  help: "Host where server for jesus to connect to is listening",
});
sc_start.addArgument(["-p", "--port"], {
  defaultValue: process.env.JESUS_PORT,
  help: "Port where server for jesus to connect to is listening",
});
sc_start.addArgument(["-s", "--socket"], {
  defaultValue: process.env.JESUS_SOCKET,
  help: "Unix socket where server for jesus to connect to is listening (only used if host/port are not)",
});
sc_start.addArgument(["-n", "--name"], {
  defaultValue: (function() { return randomId(4); })(),
});
sc_start.addArgument(["-e", "--env"], {
  action: "append",
  help: "Environment variables (specified like NAME=VALUE)",
});
sc_start.addArgument(["-f", "--format"], {
  defaultValue: process.env.JESUS_FORMAT || "text",
  choices: ["text", "json"],
});
sc_start.addArgument(["command"], {
  nargs: "...",
  help: "Command to run and supervise",
});

var sc_stop = sp.addParser("stop", {
  description: "Stop a process by name",
});
sc_stop.addArgument(["-H", "--host"], {
  defaultValue: process.env.JESUS_HOST,
  help: "Host where server for jesus to connect to is listening",
});
sc_stop.addArgument(["-p", "--port"], {
  defaultValue: process.env.JESUS_PORT,
  help: "Port where server for jesus to connect to is listening",
});
sc_stop.addArgument(["-s", "--socket"], {
  defaultValue: process.env.JESUS_SOCKET,
  help: "Unix socket where server for jesus to connect to is listening (only used if host/port are not)",
});
sc_stop.addArgument(["-f", "--format"], {
  defaultValue: process.env.JESUS_FORMAT || "text",
  choices: ["text", "json"],
});
sc_stop.addArgument(["name"]);

var sc_stopall = sp.addParser("stopall", {
  description: "Stop all processes",
});
sc_stopall.addArgument(["-H", "--host"], {
  defaultValue: process.env.JESUS_HOST,
  help: "Host where server for jesus to connect to is listening",
});
sc_stopall.addArgument(["-p", "--port"], {
  defaultValue: process.env.JESUS_PORT,
  help: "Port where server for jesus to connect to is listening",
});
sc_stopall.addArgument(["-s", "--socket"], {
  defaultValue: process.env.JESUS_SOCKET,
  help: "Unix socket where server for jesus to connect to is listening (only used if host/port are not)",
});
sc_stopall.addArgument(["-f", "--format"], {
  defaultValue: process.env.JESUS_FORMAT || "text",
  choices: ["text", "json"],
});

var sc_restart = sp.addParser("restart", {
  description: "Restart a process by name",
});
sc_restart.addArgument(["-H", "--host"], {
  defaultValue: process.env.JESUS_HOST,
  help: "Host where server for jesus to connect to is listening",
});
sc_restart.addArgument(["-p", "--port"], {
  defaultValue: process.env.JESUS_PORT,
  help: "Port where server for jesus to connect to is listening",
});
sc_restart.addArgument(["-s", "--socket"], {
  defaultValue: process.env.JESUS_SOCKET,
  help: "Unix socket where server for jesus to connect to is listening (only used if host/port are not)",
});
sc_restart.addArgument(["-f", "--format"], {
  defaultValue: process.env.JESUS_FORMAT || "text",
  choices: ["text", "json"],
});
sc_restart.addArgument(["name"]);

var sc_restartall = sp.addParser("restartall", {
  description: "Restart all processes",
});
sc_restartall.addArgument(["-H", "--host"], {
  defaultValue: process.env.JESUS_HOST,
  help: "Host where server for jesus to connect to is listening",
});
sc_restartall.addArgument(["-p", "--port"], {
  defaultValue: process.env.JESUS_PORT,
  help: "Port where server for jesus to connect to is listening",
});
sc_restartall.addArgument(["-s", "--socket"], {
  defaultValue: process.env.JESUS_SOCKET,
  help: "Unix socket where server for jesus to connect to is listening (only used if host/port are not)",
});
sc_restartall.addArgument(["-f", "--format"], {
  defaultValue: process.env.JESUS_FORMAT || "text",
  choices: ["text", "json"],
});

var sc_check = sp.addParser("check", {
  description: "Check the status of a process",
});
sc_check.addArgument(["-H", "--host"], {
  defaultValue: process.env.JESUS_HOST,
  help: "Host where server for jesus to connect to is listening",
});
sc_check.addArgument(["-p", "--port"], {
  defaultValue: process.env.JESUS_PORT,
  help: "Port where server for jesus to connect to is listening",
});
sc_check.addArgument(["-s", "--socket"], {
  defaultValue: process.env.JESUS_SOCKET,
  help: "Unix socket where server for jesus to connect to is listening (only used if host/port are not)",
});
sc_check.addArgument(["-f", "--format"], {
  defaultValue: process.env.JESUS_FORMAT || "text",
  choices: ["text", "json"],
});

var sc_list = sp.addParser("list", {
  description: "List all processes",
});
sc_list.addArgument(["-H", "--host"], {
  defaultValue: process.env.JESUS_HOST,
  help: "Host where server for jesus to connect to is listening",
});
sc_list.addArgument(["-p", "--port"], {
  defaultValue: process.env.JESUS_PORT,
  help: "Port where server for jesus to connect to is listening",
});
sc_list.addArgument(["-s", "--socket"], {
  defaultValue: process.env.JESUS_SOCKET,
  help: "Unix socket where server for jesus to connect to is listening (only used if host/port are not)",
});
sc_list.addArgument(["-f", "--format"], {
  defaultValue: process.env.JESUS_FORMAT || "text",
  choices: ["text", "json"],
});

var args = ap.parseArgs();

switch (args.action) {
  case "listen": action_listen(args); break;
  case "daemon": action_daemon(args); break;
  case "start": action_start(args); break;
  case "stop": action_stop(args); break;
  case "stopall": action_stopAll(args); break;
  case "restart": action_restart(args); break;
  case "restartall": action_restartAll(args); break;
  case "check": action_check(args); break;
  case "list": action_list(args); break;
}
